
############################################################################################################################
# Libraries for Calculations.
library("dplyr")
library("tidyverse")
library("lattice")
library("ChainLadder")
library("AER")
library("fitdistrplus")

############################################################################################################################
# Specify the paid-claim triangle for 8 years.
n <- 8

Claims <- data.frame(originf = factor(rep(2015:2022, n:1)),
                     dev = sequence(n:1),
                     inc.paid = c (10533000, 9645000, 6798000,  5136000,  3177000,  1761000,  1020000,   588000, 12003000, 11106000,  6834000,  3540000,  2868000,  1887000,
                                   1161000, 13065000, 11796000,  5838000,  4566000,  3714000,  2052000, 12885000, 10365000,  6069000,  3960000,  3660000, 12450000, 11241000,
                                   6960000,  3825000, 15306000, 13644000,  8556000, 18849000, 16800000, 21630000))

(inc.triangle <- with(Claims, {
  M <- matrix(nrow = n, ncol = n,
              dimnames = list(origin = levels(originf), dev = 1:n))
  
  M[cbind(originf, dev)] <- inc.paid
  
  M
})
)

(cum.triangle <- t(apply(inc.triangle, 1, cumsum)))

(latest.paid <- cum.triangle[row(cum.triangle) == n - col(cum.triangle) + 1])

Claims$cum.paid <- cum.triangle[with(Claims, cbind(originf, dev))]
############################################################################################################################
op <- par(fig = c(0, 0.5, 0, 1), cex = 0.8, oma = c(0, 0, 0, 0))

with(Claims, {
  interaction.plot(x.factor = dev, trace.factor = originf, response = inc.paid,
                   fun = sum, type = "b", bty = "n", legend = FALSE); axis(1, at = 1:n)
  par(fig = c(0.45, 1, 0, 1), new = TRUE, cex = 0.8, oma = c(0, 0, 0, 0)) # parameters cex to decrease the size of labels, 
  # oma is outer margin
  # fig = c(x = 0.45, x= 1, y=0, y=1)
  interaction.plot(x.factor = dev, trace.factor = originf, response = cum.paid,
                   fun = sum, type = "b", bty = "n"); axis(1, at = 1:n)
})
name.list <- c("One", "Two", "Three")
mtext(str_interp("Incremental and cumulative claims development ${name.list[3]}"), side = 3, outer = TRUE, line = -3, cex = 1.1, font = 2)
par(op)
############################################################################################################################
# Chain-Ladder Algorithm
f <- sapply((n-1):1, function(i){
  sum(cum.triangle[1:i, n-i+1])/sum(cum.triangle[1:i, n-i])
})

tail <- 1

(f <- c(f, tail))
full.triangle <- cum.triangle
for (k in 1:(n-1)) {
  full.triangle[(n-k+1):n, k+1] <- full.triangle[(n-k+1):n, k] * f[k]
  
}

full.triangle

(ultimate.paid <- full.triangle[, n])

(ldf <- rev(cumprod(rev(f))))

(dev.pattern <- 1/ldf)

(reserve <- sum(latest.paid * (ldf -1)))
sum(ultimate.paid - latest.paid)
ata(cum.triangle)

############################################################################################################################
