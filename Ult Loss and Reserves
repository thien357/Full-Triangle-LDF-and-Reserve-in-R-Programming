################################################################################################################################################
number <- 8

Claims <- data.frame(originf = factor(rep(2015:2022, number:1)),
                     dev = sequence(number:1),
                     incremental_paid = c (10533000, 9645000, 6798000,  5136000,  3177000,  1761000,  1020000,   588000, 12003000, 11106000,  6834000,  3540000,  2868000,  1887000,
                                   1161000, 13065000, 11796000,  5838000,  4566000,  3714000,  2052000, 12885000, 10365000,  6069000,  3960000,  3660000, 12450000, 11241000,
                                   6960000,  3825000, 15306000, 13644000,  8556000, 18849000, 16800000, 21630000))

(incremental_triangle <- with(Claims, {
  M <- matrix(nrow = number, ncol = number,
              dimnames = list(origin = levels(originf), dev = 1:number))
  
  M[cbind(originf, dev)] <- incremental_paid
  
  M
})
)

(cummulative_triangle <- t(apply(incremental_triangle, 1, cumsum)))

(latest_paid <- cummulative_triangle[row(cummulative_triangle) == number - col(cummulative_triangle) + 1])

Claims$cummulative_paid <- cummulative_triangle[with(Claims, cbind(originf, dev))]
head(Claims)
################################################################################################################################################
################################################################################################################################################
op <- par(fig = c(0, 0.7, 0, 1), cex = 0.7, oma = c(0, 0, 0, 0))

with(Claims, {
  interaction.plot(x.factor = dev, trace.factor = originf, response = incremental_paid,
                   fun = sum, type = "b", bty = "n", legend = FALSE); axis(1, at = 1:number)
  par(fig = c(0.45, 1, 0, 1), new = TRUE, cex = 0.7, oma = c(0, 0, 0, 0)) # parameters cex to decrease the size of labels, 
  # oma is outer margin
  # fig = c(x = 0.45, x= 1, y=0, y=1)
  interaction.plot(x.factor = dev, trace.factor = originf, response = cummulative_paid,
                   fun = sum, type = "b", bty = "n"); axis(1, at = 1:n)
})
nameoflist <- c("One", "Two", "Three")
mtext(str_interp("Inc and Cum claims development ${nameoflist[3]}"), side = 3, outer = TRUE, line = -3, cex = 1.1, font = 1)


par(op)
################################################################################################################################################
################################################################################################################################################
# Chain-Ladder Algorithm

f <- sapply((number-1):1, function(i){
  sum(cummulative_triangle[1:i, number-i+1])/sum(cummulative_triangle[1:i, number-i])
})

tail_number <- 1

(f <- c(f, tail_number))
full_triangle <- cummulative_triangle
for (k in 1:(number-1)) {
  full_triangle[(number-k+1):number, k+1] <- full_triangle[(number-k+1):number, k] * f[k]
  
}
################################################################################################################################################
################################################################################################################################################
full_triangle

(ultimate_paid <- full_triangle[, number])

(ldf <- rev(cumprod(rev(f))))

(development_pattern <- 1/ldf)

(reserve <- sum(latest_paid * (ldf -1)))
sum(ultimate_paid - latest_paid)
ata(cummulative_triangle)
